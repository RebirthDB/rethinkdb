#!/bin/sh
# Copyright 2018-present RebirthDB
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use
# this file except in compliance with the License. You may obtain a copy of the
# License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# This file incorporates work covered by the following copyright:
#
#     Copyright 2010-present, The Linux Foundation, portions copyright Google and
#     others and used with permission or subject to their respective license
#     agreements.
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
#
#     Portions from Frank Trampe and Novell used with permission.

# This file targets Ubuntu and is not in line with the Linux specification. Move runlevel 2 from Default-Start to Default-Stop for compliance.

### BEGIN INIT INFO
# Provides:          rebirthdb
# Required-Start: $remote_fs
# Required-Stop: $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: This starts a set of rebirthdb server instances.
# Description:       This looks in /etc/rebirthdb/instances.d for rebirthdb config files and launches, stops, or examines each instance described there.
### END INIT INFO

set -e -u
umask 022

# Make sure limit of open files is high (see issue #4447)
ulimit -Hn 1000000
ulimit -Sn 1000000

itask="${1:-}"

rtdbbin=/usr/bin/rebirthdb ;
rtdbconfigdir=/etc/rebirthdb ;

# parse a line from the config file
conf_read_line () {
    local _val="${1#*=}"
    local _key="${1%%=*}"
    if [ "$_val" = "$1" ]; then
        unset -v $2
        unset -v $3
        false
    else
        read -r $2 <<EOF
`echo $_key`
EOF
        read -r $3 <<EOF
${_val# }
EOF
    fi
}

# conf_read <file> <var>
# read the config file file into the variable var
conf_read () {
    local _dict="#"
    local line sect key val
    while read -r full_line; do
        line=${full_line%%#*}
        if conf_read_line "$line" key val; then
            _dict="$_dict$key=$val#"
        elif [ "`echo -n $line`" != "" ]; then
            # ignore parse errors
            true
        fi
    done < $1 && read -r $2 <<EOF
$_dict
EOF
}

# get <conf> <key> [var]
# extract the value of key from the parsed config conf
# into the variable var or if var is not passed, into the variable key
get () {
    local _valp="${1#*#$2=}"
    local _val="${_valp%%#*}"
    if [ "$_valp" = "$1" ]; then
        unset -v ${3:-$2}
        return 1
    else
        read -r ${3:-$2} <<EOF
$_val
EOF
    fi
}

default_ports_available=true

default_driver_port=28015
default_cluster_port=29015
default_http_port=8080
default_port_offset=0

# is_running <pid>
# test if the process exists
is_running () {
    ps -p "$1" > /dev/null
}

usage_fail () {
    echo "Usage: /etc/init.d/rebirthdb [start|stop|restart|force-restart|status]"
    exit 1
}

case "$itask" in
    start|stop|restart|force-restart|status)
        true
        ;;
    "")
        usage_fail
        ;;
    *)
        echo "$0: error: unknown action $1"
        usage_fail
        ;;
esac

# We check for active configurations .
if ! ls "$rtdbconfigdir"/instances.d/*.conf >/dev/null 2>/dev/null ; then
    echo "rebirthdb: No instances defined in $rtdbconfigdir/instances.d/"
    echo "rebirthdb: See http://www.rethinkdb.com/docs/guides/startup/ for more information" ;
    exit
fi

for rtdbconffile in "$rtdbconfigdir"/instances.d/*.conf ;
do
    if ! conf_read "$rtdbconffile" conf; then
        continue
    fi

    instance_name=`basename "$rtdbconffile" .conf`

    # $@ will contain the options we pass to rebirthdb
    set --
    set -- --config-file "$rtdbconffile"

    if ! get "$conf" runuser; then
        runuser=rebirthdb
        set -- "$@" --runuser "$runuser"
    fi
    if ! get "$conf" rungroup; then
        rungroup=rebirthdb
        set -- "$@" --rungroup "$rungroup"
    fi

    # If no pid file is specified, assign one and make sure the parent folder has the correct permissions
    if ! get "$conf" pid-file rtdbpidfile; then
        rtdbpidfile="/var/run/rebirthdb/$instance_name/pid_file"
    fi
    if [ -d /var/run -a "${rtdbpidfile#/var/run/}" != "$rtdbpidfile" ]; then
        parent_directory="`dirname "$rtdbpidfile"`"
        if [ ! -e "$parent_directory" ]; then
            if mkdir -p "$parent_directory"; then
                test -n "${runuser:-}"  && chown -- "$runuser"  "$parent_directory"
                test -n "${rungroup:-}" && chgrp -- "$rungroup" "$parent_directory"
            fi
        fi

        set -- "$@" --pid-file "$rtdbpidfile"
    fi

    # If no data directory is specified, assign one and make sure it has the correct permissions
    if ! get "$conf" directory rtdb_directory; then
        rtdb_directory="/var/lib/rebirthdb/$instance_name/data"
        parent_directory="/var/lib/rebirthdb/$instance_name"
        if [ ! -e "$parent_directory" ]; then
            if mkdir -p "$parent_directory"; then
                test -n "${runuser:-}"  && chown -- "$runuser"  "$parent_directory"
                test -n "${rungroup:-}" && chgrp -- "$rungroup" "$parent_directory"
            fi
        fi
        set -- "$@" --directory "$rtdb_directory"
    fi

    # Only one of the instances can use the default ports
    get "$conf" driver-port driver_port || :
    get "$conf" cluster-port cluster_port || :
    get "$conf" http-port http_port || :
    get "$conf" port-offset port_offset || :
    port_offset=${port_offset:-0}
    if [ "${driver_port:-$((default_driver_port+port_offset))}" = "$default_driver_port" -o \
         "${cluster_port:-$((default_cluster_port+port_offset))}" = "$default_cluster_port" -o \
         "${http-port:-$((default_http_port+port_offset))}" = "$default_http_port" ]; then
        if $default_ports_available; then
            default_ports_available=false
        else
            echo "rebirthdb: $instance_name: error: the default ports are already used by another instance"
            echo "rebirthdb: $instance_name: error: please use non-default values for driver-port, cluster-port and http-port in $rtdbconffile"
            continue
        fi
    fi

    if [ "$itask" = "stop" -o "$itask" = "restart" -o "$itask" = "force-restart" ] ; then
        # stop rebirthdb

        if [ ! -e "$rtdbpidfile" ] ; then
            echo "rebirthdb: $instance_name: The instance is not running (there is no pid file)"
        elif is_running "`cat "$rtdbpidfile"`" ; then
            echo -n "rebirthdb: $instance_name: Waiting for instance to stop (pid `cat "$rtdbpidfile"`) ..."
            instance_pid=`cat "$rtdbpidfile"`
            kill -INT "$instance_pid"
            while is_running "$instance_pid"; do
                echo -n "."
                sleep 1
            done
            echo " Stopped."
        else
            rm -f "$rtdbpidfile"
        fi
    fi

    if [ "$itask" = "start" -o "$itask" = "restart" -o "$itask" = "force-restart" ] ; then
        # start rebirthdb

        if ! get "$conf" bind x; then
            echo "rebirthdb: $instance_name: will only listen on local network interfaces."
            echo "rebirthdb: $instance_name: To expose rebirthdb on the network, add the 'bind=all' option to $rtdbconffile"
        fi

        if [ -e "$rtdbpidfile" ] && is_running "$(cat "$rtdbpidfile")"; then
            echo "rebirthdb: $instance_name: The instance has already started"
        else
            if [ -e "$rtdbpidfile" ] ; then
                rm "$rtdbpidfile"
            fi
            if ! get "$conf" log-file rtdblogfile; then
                rtdblogfile=$rtdb_directory/log_file
            fi
            echo "rebirthdb: $instance_name: Starting instance. (logging to \`$rtdblogfile')"
            "$rtdbbin" --daemon "$@"
        fi
    fi

    if [ "$itask" = "status" ] ; then
        # show the rebirthdb status

        if [ -e "$rtdbpidfile" ] ; then
            if ! is_running "$(cat "$rtdbpidfile")"; then
                echo "rebirthdb: $instance_name: stop/crashed"
            else
                echo "rebirthdb: $instance_name: start/running, pid `cat "$rtdbpidfile"`"
            fi
        else
            echo "rebirthdb: $instance_name: stop/waiting"
        fi
    fi
done
